#Para asignar este scrip a un NPC seleccionar primero al NPC "/npc select ID"
#despues usar "/npc assignmnet --set Carlos"
"Carlos":
    type: assignment

    actions:
      on assignment:
      - trigger name:CHAT toggle:false
      - trigger name:click toggle:true
      - trigger name:proximity toggle:true radius:3

    interact scripts:
#Aqui definimos que scrips de interaccion tendra el NPC en este caso Carlosscript
    - 16 Carlosscript

'Carlosscript':
  Type: Interact
  Steps:
    '1':
# Esto se realizara cuando el jugador se aproxime al NPC
      proximity trigger:
        entry:
          radius: 3
          Script:
# Comprobamos Si el jugador no tiene la bandera "profesion"
          - ^if <player.has_flag[profesion].not> {
# El NPC le dira al jugador el siguiente mensaje
            - ^narrate "<gold>Carlos: <green><player.name> <yellow>no tienes trabajo, te gustaria ser <green>repostero?"
# Si el jugador si tiene la bandera "profesion" y aparte la bandera de profesion es diferente a Repostero (el valor != significa diferente a)
            } else if <player.flag[profesion]> != Repostero && <player.has_flag[profesion]> {
# El NPC le dira al jugador el siguiente mensaje
            - ^narrate "<gold>Carlos: <yellow>No te gustaria ahora hacer algo de comida <gold><player.name>?"
# Si el jugador si tiene la bandera "profesion" y aparte la bandera de profesion es igual a Repostero (el valor == significa igual a)
            } else if <player.flag[profesion]> == Repostero && <player.has_flag[profesion]> {
# El NPC le dira al jugador el siguientes mensajes tomando aleatoriamente 1 de los 3 disponibles (se pueden agregar mas)
            - ^random 3
            - ^narrate "<gold>Carlos: <yellow>Oye sabias que drAke me creo? D:"
            - ^narrate "<gold>Carlos: <yellow>Que hay de nuevo <gold><player.name>?"
            - ^narrate "<gold>Carlos: <yellow>Que tal tu dia amigo?"
            }
# Esto se realizara cuando el jugador de click al NPC
      click trigger:
        Script:
          - ^if <player.has_flag[profesion].not> {
# Comprobamos si el jugador no tine la bandera profesion que abra el inventario inv_carlos
            - ^inventory open d:in@inv_carlos
# Comprobamos si el jugador si tine la bandera profesion pero es diferente a la de Repostero, que abra el inventario inv_carlos
            } else if <player.flag[profesion]> != Repostero && <player.has_flag[profesion]> {
            - ^inventory open d:in@inv_carlos
            }
# quiza aqui te preguntes el porque de estas comprovaciones si abre el mismo inventario no?
# simple lo que queremos evitar es que si el jugador tiene ya la flag de profesion con el valor "Repostero" que no pase nada
# cuando el jugador de click 
# en la primera comprobacion decimos que si el jugador no tiene aun ningun trabajo (por ende no tiene el flag de profesio) entonces abre el invenario
# en la segunda decimos si el jugador ya tiene la flag de profesion perooo... que sea diferente el valor que tiene ese flag a Repostaro, en pocas palabras que tenga otro trabajo
# entonces igual abre el inventario, entonces no hay otra comprobacion que diga "si el jugador tiene el flag profesion con el valor Repostero entonces..." como se veia en el de proximidad (linea 34 de este documento)

# AQUI TERMINA EL SCRIPT DE "Carlosscript"
#




#
#Ahora nos toca crear los inventarios que se abriran al dar click en el NPC
inv_carlos:
  type: inventory
  inventory: dispenser
  size: 9
  slots:
#Aqui se define que items va a llevar el invetario en cada slot
  - "[i@cancelslot] [i@repoinfo1] [i@contratar]"
  - "[i@cancelslot] [i@cancelslot] [i@cancelslot]"
  - "[i@cancelslot] [i@cancelslot] [i@salir]"

#Aqui definiremos los items que llevan los inventarios de arriba
repoinfo1:
  type: item
  material: 339
  display name: '<yellow>Repostero'
  lore:
  - ''
  - '<green>Util para ganar dinero'
  - '<green>creando comida'
# NOTA estos items solo se crean una ves, pero se pueden reutilizar para no estar creando miles de items y se pueden colocar en muchos invnetarios sin afectar nada.
# Precaucion: siempre lleva un orden de los items que estes creando, no puede haber 2 items con el mismo nombre o simplemente no se podra ver el item y al no estar bien
# definido el inventario tampoco funcionara.
cancelslot:
  type: item
  material: 160,15
  display name: '<black>.'
contratar:
  type: item
  material: 35,5
  display name: '<green>Contratame'
  lore:
  - ''
  - '<dark_green>quiero este trabajo'
salir:
  type: item
  material: 35,14
  display name: '<red>Salir'
  lore:
  - ''
  - '<dark_red>no me interesa'